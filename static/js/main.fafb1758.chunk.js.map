{"version":3,"sources":["components/Header/Header.js","components/Footer/Footer.js","components/Card/Card.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","id","className","src","alt","styles","footer","background","color","textAlign","Footer","style","href","Date","getFullYear","Card","onClick","clickedTwice","path","name","App","state","score","highScore","cardImages","_this","forEach","element","beenClicked","alert","resetGame","scoreBoard","randomizeCards","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","shuffle","setState","resetGameandHighScore","newState","_this2","this","components_Header_Header","map","data","components_Card_Card","randomize","boolean","key","components_Footer_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fafb1758.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css'\n\nconst Header = props => {\n  return (\n    <img id='banner' className='img-fluid' src=\"../images/banner.jpg\" alt=\"Overwatch Clicky Game!\"/>\n  )\n}\n\nexport default Header;\n","import React from 'react';\n\nconst styles = {\n  footer: {\n    background: '#007bff',\n    color: \"#fff\",\n    textAlign: 'center'\n  }\n}\n\nconst Footer = props => {\n  return (\n    <div style={styles.footer} className=\"footer font-small pt-4 mt-4\">\n      <div className=\"row\">\n        <div className=\"col-md-6\">\n          <h5 className=\"title\">Footer Content</h5>\n          <p>Here is overwatch footer content.</p>\n        </div>\n\n        <div className=\"col-md-6\">\n          <h5 className=\"title\">Links</h5>\n          <ul>\n            <li className=\"list-unstyled\"><a href=\"#!\">Link 1</a></li>\n            <li className=\"list-unstyled\"><a href=\"#!\">Link 2</a></li>\n            <li className=\"list-unstyled\"><a href=\"#!\">Link 3</a></li>\n            <li className=\"list-unstyled\"><a href=\"#!\">Link 4</a></li>\n          </ul>\n        </div>\n      </div>\n\n      <div className=\"footer-copyright text-center py-3\">\n        <div className=\"container-fluid\">\n          &copy; {(new Date().getFullYear())} Copyright: <a href=\"#\"> overwatchclickygame.com </a>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Footer;\n","import React from 'react';\nimport './Card.css'\n\nconst Card = props => {\n  return (\n    <img onClick={() => props.clickedTwice(props.id)} id={props.id} src={props.path} alt={props.name} />\n  )\n}\n\nexport default Card;\n","import React, { Component } from 'react';\nimport Header from './components/Header/Header'\nimport Footer from './components/Footer/Footer'\nimport Card from './components/Card/Card';\nimport cardImages from './cardImages.json'\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    score: 0,\n    highScore: 0,\n    cardImages: cardImages,\n  }\n\n  clickedTwice = id => {\n    this.state.cardImages.forEach(element => {\n      if (element.id === id) {\n        if (element.beenClicked) {\n          alert('you lose');\n          this.resetGame()\n          return false\n        }\n        if (!element.beenClicked) {\n          this.scoreBoard()\n          element.beenClicked = true;\n        }\n        if (this.state.score >= this.state.highScore) {\n          this.highScore()\n        }\n      }\n    });\n    this.randomizeCards(this.state.cardImages)\n  }\n\n  randomizeCards = array => {\n    function shuffle(array) {\n      var currentIndex = array.length, temporaryValue, randomIndex;\n      while (0 !== currentIndex) {\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n      }\n      return array;\n    }\n    shuffle(this.state.cardImages)\n    this.setState({ cardImages })\n  }\n\n  resetGame = cardImages => {\n    this.state.cardImages.forEach(element => {\n      element.beenClicked = false;\n    })\n    this.setState({\n      score: 0,\n    })\n  }\n  resetGameandHighScore = cardImages => {\n    this.state.cardImages.forEach(element => {\n      element.beenClicked = false;\n    })\n    this.setState({\n      score: 0,\n      highScore: 0\n    })\n  }\n\n  scoreBoard = () => {\n    this.setState(newState => ({ score: newState.score + 1 }))\n  }\n\n  highScore = () => {\n    this.setState(newState => ({ highScore: newState.score }))\n  }\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <div className='container'>\n          <div className='row nav'>\n            <div className='col-lg-12 scoreboard'>\n              <br />\n              <h2 className='score'>\n                Score: {this.state.score} <button onClick={() => this.resetGame()} id='reset' className=' btn btn-primary reset'>Reset Game!</button>\n              </h2>\n              <h2 className='highscore'>\n                High Score: {this.state.highScore}  <button onClick={() => this.resetGameandHighScore()} id='reset' className='btn btn-warning reset2'>Reset High Score/Game</button>\n              </h2>\n            </div>\n          </div>\n          <div className='row background' >\n            <div id='grid' className='col-lg-12 grid'>\n              {this.state.cardImages.map(data => (\n                <Card randomize={() => this.randomizeCards(this.state.cardImages)} clickedTwice={this.clickedTwice} boolean={this.state.beenClicked} key={data.id} id={data.id} path={data.path} />\n              ))}\n            </div>\n          </div>\n        </div>\n          <Footer />\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}